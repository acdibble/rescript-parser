// Generated by ReScript, PLEASE EDIT WITH CARE

import * as P from "./P.res.mjs";
import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Core__List from "@rescript/core/src/Core__List.res.mjs";
import * as Core__Float from "@rescript/core/src/Core__Float.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as RescriptCore from "@rescript/core/src/RescriptCore.res.mjs";

var jsonNull = P.map(P.string("null"), (function (param) {
        return "Null";
      }));

var jsonTrue = P.map(P.string("true"), (function (param) {
        return {
                TAG: "Bool",
                _0: true
              };
      }));

var jsonFalse = P.map(P.string("false"), (function (param) {
        return {
                TAG: "Bool",
                _0: false
              };
      }));

var unescapedChar = P.satisfy(function (ch) {
      if (ch !== "\\") {
        return ch !== "\"";
      } else {
        return false;
      }
    });

var escapedChar = P.map(P.andThen(P.$$char("\\"), P.map(P.anyOf([
                  "\"",
                  "\\",
                  "/",
                  "b",
                  "f",
                  "n",
                  "r",
                  "t"
                ]), (function (result) {
                switch (result) {
                  case "/" :
                      return "/";
                  case "\"" :
                      return "\"";
                  case "\\" :
                      return "\\";
                  case "b" :
                      return "\b";
                  case "f" :
                      return "\f";
                  case "n" :
                      return "\n";
                  case "r" :
                      return "\r";
                  case "t" :
                      return "\t";
                  default:
                    return RescriptCore.panic("unreachable");
                }
              }))), (function (param) {
        return param[1];
      }));

var digit = P.label(P.anyOf("0123456789".split("")), "digit");

var unicodeChar = P.map(P.andThen(P.string("\\u"), P.sequence([
              digit,
              digit,
              digit,
              digit
            ])), (function (param) {
        return String.fromCharCode(Core__Option.getExn(Core__Int.fromString(Core__List.toArray(param[1]).join(""), 16), undefined));
      }));

var unquotedString = P.map(P.many(P.choice([
              unescapedChar,
              escapedChar,
              unicodeChar
            ])), (function (chars) {
        return Core__List.toArray(chars).join("");
      }));

var quote = P.$$char("\"");

var jsonString = P.map(P.between(quote, unquotedString, quote), (function (v) {
        return {
                TAG: "String",
                _0: v
              };
      }));

var signPart = P.$$char("-");

var zero = P.$$char("0");

var oneThruNine = P.anyOf("123456789".split(""));

var zeroOrMoreDigits = P.many(digit);

var integerPart = P.choice([
      zero,
      P.map(P.andThen(oneThruNine, zeroOrMoreDigits), (function (param) {
              return param[0] + Core__List.toArray(param[1]).join("");
            }))
    ]);

var fractionalPart = P.map(P.andThen(P.$$char("."), zeroOrMoreDigits), (function (param) {
        return "." + Core__List.toArray(param[1]).join("");
      }));

function jsonOpt(p) {
  return P.map(P.opt(p), (function (v) {
                return Core__Option.getOr(v, "");
              }));
}

var exponentPart = P.map(P.andThen(P.andThen(P.anyOf([
                  "e",
                  "E"
                ]), jsonOpt(P.anyOf([
                      "+",
                      "-"
                    ]))), zeroOrMoreDigits), (function (param) {
        var match = param[0];
        return match[0] + match[1] + Core__List.toArray(param[1]).join("");
      }));

var jsonNumber = P.map(P.sequence([
          jsonOpt(signPart),
          integerPart,
          jsonOpt(fractionalPart),
          jsonOpt(exponentPart)
        ]), (function (v) {
        return {
                TAG: "Number",
                _0: Core__Option.getExn(Core__Float.fromString(Core__List.toArray(v).join("")), undefined)
              };
      }));

var whitespace = P.many(P.anyOf([
          " ",
          "\t",
          "\n",
          "\r"
        ]));

function betweenWhitespace(__x) {
  return P.between(whitespace, __x, whitespace);
}

var jsonValue = P.makeRecursive(function (p) {
      var jsonObject = P.map(P.between(P.$$char("{"), P.sepBy(P.map(P.sequence([
                            betweenWhitespace(jsonString),
                            P.map(P.$$char(":"), (function (param) {
                                    return "Null";
                                  })),
                            p
                          ]), (function (v) {
                          if (!v) {
                            return RescriptCore.panic("unreachable");
                          }
                          var match = v.tl;
                          if (!match) {
                            return RescriptCore.panic("unreachable");
                          }
                          var match$1 = match.tl;
                          if (match$1 && !match$1.tl) {
                            return [
                                    v.hd,
                                    match$1.hd
                                  ];
                          } else {
                            return RescriptCore.panic("unreachable");
                          }
                        })), betweenWhitespace(P.$$char(","))), P.$$char("}")), (function (v) {
              return {
                      TAG: "Object",
                      _0: Core__List.reduce(v, new Map(), (function (acc, param) {
                              var key = param[0];
                              if (typeof key !== "object" || key.TAG !== "String") {
                                RescriptCore.panic("unreachable");
                              } else {
                                acc.set(key._0, param[1]);
                              }
                              return acc;
                            }))
                    };
            }));
      var jsonArray = P.map(P.between(P.$$char("["), P.sepBy(p, betweenWhitespace(P.$$char(","))), P.$$char("]")), (function (v) {
              return {
                      TAG: "Array",
                      _0: Core__List.toArray(v)
                    };
            }));
      return betweenWhitespace(P.choice([
                      jsonNull,
                      jsonTrue,
                      jsonFalse,
                      jsonString,
                      jsonNumber,
                      jsonObject,
                      jsonArray
                    ]));
    });

function toString(json) {
  if (typeof json !== "object") {
    return "null";
  }
  switch (json.TAG) {
    case "Bool" :
        if (json._0) {
          return "true";
        } else {
          return "false";
        }
    case "String" :
        return "\"" + json._0 + "\"";
    case "Number" :
        return json._0.toString();
    case "Object" :
        return "{" + Array.from(json._0.entries()).map(function (param) {
                      return toString({
                                  TAG: "String",
                                  _0: param[0]
                                }) + ": " + toString(param[1]);
                    }).join(", ") + "}";
    case "Array" :
        return "[" + json._0.map(toString).join(", ") + "]";
    
  }
}

export {
  jsonNull ,
  jsonTrue ,
  jsonFalse ,
  unescapedChar ,
  escapedChar ,
  digit ,
  unicodeChar ,
  unquotedString ,
  quote ,
  jsonString ,
  signPart ,
  zero ,
  oneThruNine ,
  zeroOrMoreDigits ,
  integerPart ,
  fractionalPart ,
  jsonOpt ,
  exponentPart ,
  jsonNumber ,
  whitespace ,
  betweenWhitespace ,
  jsonValue ,
  toString ,
}
/* jsonNull Not a pure module */
